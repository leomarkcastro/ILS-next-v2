generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Next-Auth Provided Objects

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Profile       Profile?
  passwordHash  String?
  profileId     String?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Self Generated Objects

enum Role {
  ADMIN
  USER
}

model Profile {
  id                 String              @id
  User               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String              @unique
  role               Role                @default(USER)
  Exams              Exam[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  ClassesOwned       Class[]
  ClassesJoined      StudentsOnClasses[]
  ExamSet            ExamSet[]
  ProfileDemoraphics ProfileDemoraphics?
}

model ProfileDemoraphics {
  id             String  @id
  Profile        Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String  @unique
  fullname       String?
  gender         String?
  age            Int?
  religion       String?
  course         String?
  year           Int?
  specialization String?
  section        String?
  municipality   String?
  province       String?
  familyType     String?
  surveyAnswers  Json?
}

model StudentsOnClasses {
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String // relation scalar field (used in the `@relation` attribute above)
  class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String // relation scalar field (used in the `@relation` attribute above)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([profileId, classId])
}

model Class {
  id            String              @id @default(cuid())
  ClassProfile  ClassProfile?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  Facilitator   Profile?            @relation(references: [id], fields: [facilitatorID], onDelete: Cascade)
  facilitatorID String?
  Students      StudentsOnClasses[]
  ExamSets      ExamSet[]
}

model ClassProfile {
  id        String   @id @default(cuid())
  Class     Class    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String   @unique
  name      String
  school    String?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamSet {
  id        String    @id @default(cuid())
  name      String
  notes     String
  Class     Class?    @relation(fields: [classId], references: [id], onDelete: Cascade)
  classId   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Exam      Exam[]
  Takers    Profile[]
  options   Json
  whitelist Boolean   @default(false)
}

model Exam {
  id           String        @id @default(cuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Profile      Profile?      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId    String?
  ExamSet      ExamSet?      @relation(fields: [examSetId], references: [id], onDelete: Cascade)
  examSetId    String?
  ExamContents ExamContents?
}

model ExamContents {
  id        String   @id @default(cuid())
  Exam      Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId    String   @unique
  seqGlo    Float
  actRef    Float
  senInt    Float
  visVer    Float
  answers   Json
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
